// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/boreq/errors"
	"github.com/planetary-social/go-ssb/identity"
	"github.com/planetary-social/go-ssb/logging"
	"github.com/planetary-social/go-ssb/network"
	"github.com/planetary-social/go-ssb/network/boxstream"
	"github.com/planetary-social/go-ssb/network/rpc"
	"github.com/planetary-social/go-ssb/scuttlebutt"
	"github.com/planetary-social/go-ssb/scuttlebutt/adapters"
	"github.com/planetary-social/go-ssb/scuttlebutt/commands"
	"github.com/planetary-social/go-ssb/scuttlebutt/feeds/content/transport"
	"github.com/planetary-social/go-ssb/scuttlebutt/feeds/formats"
	"github.com/planetary-social/go-ssb/scuttlebutt/replication"
	"github.com/sirupsen/logrus"
	"go.etcd.io/bbolt"
	"time"
)

// Injectors from wire.go:

func BuildService(private identity.Private) (Service, error) {
	networkKey := boxstream.NewDefaultNetworkKey()
	handshaker, err := boxstream.NewHandshaker(private, networkKey)
	if err != nil {
		return Service{}, err
	}
	logger := newLogger()
	peerInitializer := network.NewPeerInitializer(handshaker, logger)
	mux := rpc.NewMux(logger)
	db, err := newBolt()
	if err != nil {
		return Service{}, err
	}
	messageContentMappings := transport.DefaultMappings()
	marshaler, err := transport.NewMarshaler(messageContentMappings, logger)
	if err != nil {
		return Service{}, err
	}
	v := formats.AllFormats(marshaler)
	rawMessageIdentifier := formats.NewRawMessageIdentifier(v)
	boltFeedStorage := adapters.NewBoltFeedStorage(db, rawMessageIdentifier)
	manager := replication.NewManager(logger, boltFeedStorage)
	rawMessageHandler := commands.NewRawMessageHandler(boltFeedStorage, rawMessageIdentifier, logger)
	gossipReplicator, err := replication.NewGossipReplicator(manager, rawMessageHandler, logger)
	if err != nil {
		return Service{}, err
	}
	peerManager := scuttlebutt.NewPeerManager(mux, gossipReplicator, logger)
	listener, err := network.NewListener(peerInitializer, peerManager, logger)
	if err != nil {
		return Service{}, err
	}
	application := _wireApplicationValue
	service := NewService(listener, application)
	return service, nil
}

var (
	_wireApplicationValue = commands.Application{}
)

// wire.go:

func newBolt() (*bbolt.DB, error) {
	b, err := bbolt.Open("/tmp/tmp.bolt.db", 0600, &bbolt.Options{Timeout: 5 * time.Second})
	if err != nil {
		return nil, errors.Wrap(err, "could not open the database, is something else reading it?")
	}
	return b, nil
}

func newLogger() logging.Logger {
	log := logrus.New()
	log.SetLevel(logrus.DebugLevel)
	return logging.NewLogrusLogger(log, "main")
}
